<div class='row'>
  <div class='col s6'>
    <header class='boxed-edit'>
      <h3 id='note-show-title'> <%= @note.title %> </h3>
      <p id='note-edit-link'> <%= link_to ("<i class='large material-icons'>mode_edit</i>").html_safe, edit_note_path(@note), remote: true, class: "btn-floating btn waves-effect waves-light blue", title: 'edit' %> </p>
    </header>
    <div class='note-edit-form' style="display:none;"></div>
    <div>
      <div id="player"></div>
    </div>

    <div class='video-show-list' style="display:inline;"><%= render partial: '/videos/show' %></div>

    <div>
      <%= render '/stamps/new' %>
    </div>
  </div>

  <div class='col s6'>
      <div class='stamp-show-list' style="display:inline;"><%= render partial: '/stamps/show' %></div>
  </div>

</div>

<script>
  function youtubeParser(url){
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = url.match(regExp);
    console.log(url);
    console.log(match);
    console.log(match[7])
    return (match&&match[7].trim().length==11)? match[7] : false;
  };
    var link = $('.this-thing').html();
    console.log(link);
    var parsedUrl = youtubeParser(link).trim();
    console.log(parsedUrl);


// 2. This code loads the IFrame Player API code asynchronously.
     var tag = document.createElement('script');
     tag.src = "https://www.youtube.com/iframe_api";
     var firstScriptTag = document.getElementsByTagName('script')[0];
     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

     // 3. This function creates an <iframe> (and YouTube player)
     //    after the API code downloads.
     var player;
     function onYouTubeIframeAPIReady() {
       player = new YT.Player('player', {
         height: '390',
         width: '640',
         videoId: parsedUrl,
         events: {
           'onReady': onPlayerReady,
           'onStateChange': onPlayerStateChange
         }
       });
     }

     // 4. The API will call this function when the video player is ready.
     function onPlayerReady(event) {
       event.target.playVideo();
     }

     // 5. The API calls this function when the player's state changes.
     //    The function indicates that when playing a video (state=1),
     //    the player should play for six seconds and then stop.
     var done = false;
     function onPlayerStateChange(event) {
       if (event.data == YT.PlayerState.PLAYING && !done) {
         setTimeout(stopVideo, 6000);
         done = true;
       }
     }
     function stopVideo() {
       player.stopVideo();
     }
</script>
